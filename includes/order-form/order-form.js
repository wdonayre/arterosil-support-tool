//TEMPORARY GLOBAL DECLARATION FOR DEBUGGING//
var ORDERFORM;
var temprenderCartView;
//////////////////////////////////////////////
(function( $ ) {
	'use strict';

    /**
     * arterosil_ajaxurl = holds ajax url
     */
    var GLOBALS = {
        ajaxurl:arterosil_ajaxurl,
    };
    temprenderCartView = renderCartView;
    ORDERFORM = {
            cart: {},
            productList: null,
            templates: {},
            order: {}
        };
    var APPDATA = {
        // products: JSON.parse(escapeSpecialChars( productsString ))
    };

    $(document).ready(function(){
        initData()
        .then(function(){
            
            orderSnapshotEngine().init();

            initTemplate();
        
            initProductSelect2();
            initQuantityChangeHandler();

            renderView().billing();
            renderView().shipping();

            //init buttons
            initAddProductButton();
            initAddCard();

            //init main order process
            initProcessOrderButton();



            spinner().done();
            
        });
        
    });

    /**
     * Order Snapshot Engine
     */
    function orderSnapshotEngine(){
        
        var STORAGEKEY = 'ZCSWooCart';

        return {
            init: function(){
                if(sessionStorage[STORAGEKEY]){
                    var sessionData = JSON.parse(sessionStorage[STORAGEKEY]);
                    ORDERFORM = sessionData.ORDERFORM;  
                    renderCartView(); 
                }
                else {
                    sessionStorage[STORAGEKEY] = JSON.stringify({
                        ORDERFORM:{
                            cart: ORDERFORM.cart,
                            order: ORDERFORM.order,
                        }
                    });
                }

            },
            update: function(){
                sessionStorage.setItem(STORAGEKEY,JSON.stringify({
                    ORDERFORM:{
                        cart: ORDERFORM.cart,
                        order: ORDERFORM.order,
                    }
                }));
            }
        };
    }

    /**
     * Initialize Process Order Button event
    */
    function initProcessOrderButton(){
        $('[data-aaction="processOrder"]').on('click',(e)=>{
            e.preventDefault();
            processOrder();
        });
    }

    /**
     * Load Dependencies and Data
     */
    function initData(){
        var dfd = new $.Deferred();

        // if(USERID){
        //     var args = {
        //         userID:USERID,
        //         action:'getTest',
        //         test:'user'
        //     };
        //     $.post(arterosil_ajaxurl,args)
        //     .done(function(data){
        //         console.log('INIT >> ', data);
        //     });
        // }

        //load user data
        if(USERID){
            var args = {
                userID:USERID,
                action:'getAll',
                nonce:''
            };
            $.post(arterosil_ajaxurl,args)
            .done(function(data){
                APPDATA['user'] = data.model.customer;
                APPDATA['products'] = data.model.products;
                APPDATA['cards'] = data.model.cards;
                APPDATA['config'] = data.model.config;
                //render select2 option box
                updateSelect2Options();

                renderView().customer();
                dfd.resolve(true);
            })
            .fail(function(data){
                console.error("Error while fetching User Data");
                dfd.reject(false);
            });
        }

        return dfd.promise();
    }

    /**
     * Init Form Update Button
     */
    function initFormUpdateButton(){
        $('[data-aaction="formUpdate"]').off('click');
        $('[data-aaction="formUpdate"]').on('click',function(e){
            e.preventDefault();
            $(this).closest('.form-update').find('.form-update__view').hide();
            $(this).closest('.form-update').find('.form-update__edit').fadeIn();
        });
    }

    /**
     * Initializes Add Product Button generated by the "Order Form" endpoint.
     */
    function initAddProductButton(){
        $('[data-aaction="addProduct"]').on('click',function(e){
            e.preventDefault();
            $(this).hide();
            $(this).closest('.product-list').find('.add-product-wrapper').removeClass('a-hidden');
            
            //alert( $(this).closest('.add-product-wrapper'));

        });

        //attach event to add to cart button
        $('.btn[data-aaction="addToCart"]').on('click',function(e){
            e.preventDefault();
            $(this).closest('.add-product-wrapper')
            .addClass('a-hidden')
            .prev().show();

            //inject product items
            if(ORDERFORM.productList[0].$$selected){
                ORDERFORM.cart[ORDERFORM.productList[0].$$selected.value] = {
                    text:       ORDERFORM.productList[0].$$selected.text,
                    quantity:  ORDERFORM.productList[0].$$selected.quantity,
                    productObj: APPDATA.products[ ORDERFORM.productList[0].$$selected.value+'' ],
                    discount: ORDERFORM.productList[0].$$selected.discount,
                    savings: ORDERFORM.productList[0].$$selected.savings,
                };
                renderCartView();
            }
            orderSnapshotEngine().update();

        });
    }

    /**
     * INIT TEMPLATES
    */
    function initTemplate(){
        var viewTemplates = {};

        viewTemplates['addCard'] = Handlebars.compile( document.getElementById("tplAddCard").innerHTML );
        viewTemplates['billing'] = Handlebars.compile( document.getElementById("tplBilling").innerHTML );
        viewTemplates['shipping'] = Handlebars.compile( document.getElementById("tplShipping").innerHTML );
2
        //var htmlAddCard = document.getElementById("tplAddCard").innerHTML;
        //ORDERFORM.templates['tplAddCard'] = Handlebars.compile(htmlAddCard);
        ORDERFORM.templates = viewTemplates;
    }

    /**
     * Initialize Add Card Button
    */
    function initAddCard(){
        $('[data-aaction="addAnotherCard"]').on('click',function(e){
            var button = $(this);
            var cardSelect = $('.stripe-cards').parent();
            cardSelect.hide().next().hide();

            e.preventDefault();
            spinner().loading();

           //get intent

            var orderData = {
                userID: USERID,
                action: 'getIntent'
            }; 

            $.post(arterosil_ajaxurl,orderData)
            .done(function(data){
                button.hide();

                spinner().done();
                
                console.log('INTENT >> ', data);
                //var html = ORDERFORM.templates.tplAddCard(data);
                var html = ORDERFORM.templates.addCard(data);

                var stripe = Stripe(data.pk);
                var elements = stripe.elements();
                var cardElement = elements.create('card');
                
                //inject addCard template
                $('.add-card-outer')
                .html('')
                .append($(html))
                .find('#card-button').on('click',function(e){
                    e.preventDefault();
                    stripe.handleCardSetup(
                        data.client_secret,
                        cardElement, 
                        {
                            payment_method_data: {
                                billing_details: {
                                    name    : APPDATA.user[USERID].data.display_name,
                                    email   : APPDATA.user[USERID].data.user_email
                                }
                            }
                        }
                      ).then(function(result) {
                        if (result.error) {
                          // Display error.message in your UI.
                          console.log('ERROR >> ', result);
                        } else {
                          // The setup has succeeded. Display a success message.
                            console.log('SUCCESS >> ', result);
                            if(!APPDATA.user.meta['_stripe_customer_id']){
                                $.post(arterosil_ajaxurl,{ paymentMethod: result.setupIntent.payment_method, action: 'createCustomerByPaymentMethod', user: APPDATA.user[USERID].data})
                                .done(function(data){
                                    APPDATA.cards.data.push(data);
                                    // console.log('DONE CREATING CUSTOMER >> ', data,APPDATA);
                                    renderCardsView(data.id);
                                })
                                .fail(function(data){
                                    console.error(data,"Error while fetching User Data");
                                });
                            }
                            else {
                                $.post(arterosil_ajaxurl,{ paymentMethod: result.setupIntent.payment_method, action: 'attachCard', user: APPDATA.user[USERID].data})
                                .done(function(data){
                                    APPDATA.cards.data.push(data);
                                    // console.log('DONE CREATING CUSTOMER >> ', data,APPDATA);
                                    renderCardsView(data.id);
                                })
                                .fail(function(data){
                                    console.error(data,"Error while fetching User Data");
                                });    
                            }
                            
                        }
                    });
                });

                cardElement.mount('#card-element');

            })
            .fail(function(data){
                
                console.error(data,"Error while fetching User Data");
            });
        });
     }

    /**
     * Rend Cart View
     */
    function renderCartView(){

        if(!$.isEmptyObject(ORDERFORM.cart)){
            
            var ret = "<tr> <th>ID</th> <th>Item</th> <th>Qty</th> <th>Savings</th> <th></th> </tr>";
            for(var key in ORDERFORM.cart){
                ret += '<tr id="'+key+'"> <td>'+key+'</td>  <td>'+ORDERFORM.cart[key].text+'</td>  <td>'+ORDERFORM.cart[key].quantity+'</td> <td>'+ORDERFORM.cart[key].discount+ "% OFF - $" +(ORDERFORM.cart[key].savings*ORDERFORM.cart[key].quantity).toFixed(2)+'</td> <td><a href="#" class="remove">REMOVE</a></td>:</tr>';
            }

            // REMOVE button is clicked on the cart
            var table = $(ret);
            //console.log( table.find('.remove').length);
            table.find('.remove').on('click',function(e){
                e.preventDefault();
                var id = $(this).closest('tr').attr('id');
                delete ORDERFORM.cart[id];
                renderCartView();
            });

            $('.product-list').removeClass('no-items')
            .find('table.product-list-table').html("").append(table);
            
        }
        else {
            $('.product-list').addClass('no-items')
            .find('table.product-list-table').html("");    
        }
        renderView().orderSummary();
    }

    /**
     * Init Product Select 2 Dropdown
     */
    function initProductSelect2(){
        //initialize select2 for products
        ORDERFORM
        .productList = $('.wc-product-list')
        .select2({ placeholder: 'Select Product'})                //init
        .on('change', function(e){  //bind change event
            var selectedValue = e.currentTarget.options[e.currentTarget.options.selectedIndex].getAttribute('value');
            var regularPrice = APPDATA.products[selectedValue].wcProduct.regular_price;
            var rolePrice = APPDATA.products[selectedValue].rolePrice;

            e.currentTarget['$$selected'] = {
                quantity: $(e.currentTarget).closest('.add-product-wrapper').find('input[name="product-quantity"]').val(),
                text: e.currentTarget.options[e.currentTarget.options.selectedIndex].text,
                value: selectedValue,
                discount: (((regularPrice - rolePrice)/regularPrice) * 100).toFixed(2),
                savings: (regularPrice - rolePrice).toFixed(2)
            };
            console.log(APPDATA.products[selectedValue].wcProduct.regular_price);
            renderView().orderSummary();
        });
    }

    /**
     * Init On Change Handler For Quantity field
     */
    function initQuantityChangeHandler(){
        //Bind change event for Quantity field
        ORDERFORM
        .productList
        .closest('.add-product-wrapper').find('input[name="product-quantity"]')
        .on('change', function(e){
            if(typeof ORDERFORM.productList[0]['$$selected'] === 'undefined'){
                ORDERFORM.productList[0]['$$selected'] = {};  
            }
            ORDERFORM.productList[0].$$selected['quantity'] = e.currentTarget.value;

            renderView().orderSummary();
        });
    }


    /**
     * UTILITY FUNCTIONS
     */
    function escapeSpecialChars(jsonString) {

        return jsonString.replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/\t/g, "\\t")
            .replace(/\f/g, "\\f");

    }

    function updateSelect2Options(){
        if(APPDATA.products){
            var products = APPDATA.products;
            var role = APPDATA.user[USERID].roles[0];
            $('.wc-product-list').append('<option></option>');
            for(var key in products){
                var $option =  '<option value="'+ key +'">$'+ products[key].rolePrice+" - "+products[key].wpProduct['post_title']+'</option>';
                $('.wc-product-list').append($($option));
            }
        }
        // //update cards
        // if(APPDATA.cards && APPDATA.cards.data){
        //     var cards = APPDATA.cards.data;
        //     $('.stripe-cards').html('');
        //     $('.stripe-cards').append('<option>-- Select payment method --</option>');
        //     for(var key in cards){
        //         var $option =  '<option value="'+ cards[key].id +'">Card Ending: '+ cards[key].card.last4+" - Expiry: "+cards[key].card.exp_month+"/"+cards[key].card.exp_year+'</option>';
        //         $('.stripe-cards').append($($option));
        //     }    
        // }
        renderCardsView();
        
    }

    function renderCardsView(preSelect){
        var selected = "";
        if(preSelect){
            selected = preSelect;
        }
        if(APPDATA.cards && APPDATA.cards.data){
            var cards = APPDATA.cards.data;
            $('.stripe-cards').html('');
            $('.stripe-cards').append('<option>-- Select payment method --</option>');
            for(var key in cards){
                var $option =  '<option '+(cards[key].id===selected?'selected':'')+' value="'+ cards[key].id +'">Card Ending: '+ cards[key].card.last4+" - Expiry: "+cards[key].card.exp_month+"/"+cards[key].card.exp_year+'</option>';
                $('.stripe-cards').append($($option));
            }    
        }
        $('.add-card-outer').html('');
        $('.stripe-cards').parent().show().next().show();
        $('[data-aaction="addAnotherCard"]').show();
        

    }

    function renderView(){
        
        console.log('APPDATA: ',APPDATA);
        return {
            customer: function(){
                var $customer = APPDATA.user[USERID+''];
                $('.customer__name').find('span').text($customer.data.display_name);
                $('.customer__role').find('span').text($customer.roles[0]);
            },
            orderSummary: function(){
                var $total = 0;
                console.log('ORDER >> ', ORDERFORM.cart);
                for(var key in ORDERFORM.cart){
                    $total += parseFloat(ORDERFORM.cart[key].productObj.rolePrice ) * parseFloat(ORDERFORM.cart[key].quantity ) 
                }
                $('.summary__order-total').find('span').text('$'+$total.toFixed(2));
            },
            billing: function(){
                $('.billing-outer').html( $(ORDERFORM.templates.billing( { data:APPDATA.user.meta, config:APPDATA.config} )) );
                //update click event
                $('.billing-outer').find('[data-aaction="updateBilling"]').on('click', function(e){
                    e.preventDefault();

                    var parentForm = $(this).closest('.form-update__edit');
                    var orderData = {
                        userID: USERID,
                        action: 'updateBilling'
                    };   

                    parentForm.find('[name="billing_address_1"]').val()     && (orderData['billing_address_1']  = parentForm.find('[name="billing_address_1"]').val());
                    parentForm.find('[name="billing_address_2"]').val()     && (orderData['billing_address_2']  = parentForm.find('[name="billing_address_2"]').val());
                    parentForm.find('[name="billing_city"]').val()          && (orderData['billing_city']       = parentForm.find('[name="billing_city"]').val());
                    parentForm.find('[name="billing_company"]').val()       && (orderData['billing_company']    = parentForm.find('[name="billing_company"]').val());
                    parentForm.find('[name="billing_country"]').val()       && (orderData['billing_country']    = parentForm.find('[name="billing_country"]').val());
                    parentForm.find('[name="billing_first_name"]').val()    && (orderData['billing_first_name'] = parentForm.find('[name="billing_first_name"]').val());
                    parentForm.find('[name="billing_last_name"]').val()     && (orderData['billing_last_name']  = parentForm.find('[name="billing_last_name"]').val());
                    parentForm.find('[name="billing_state"]').val()         && (orderData['billing_state']      = parentForm.find('[name="billing_state"]').val());
                    parentForm.find('[name="billing_postcode"]').val()      && (orderData['billing_postcode']   = parentForm.find('[name="billing_postcode"]').val());
                    //parentForm.find('[name="billing_phone"]').val()       && (orderData['billing_phone'] = parentForm.find('[name="billing_phone"]').val());
                    //parentForm.find('[name="billing_email"]').val()       && (orderData['billing_email'] = parentForm.find('[name="billing_email"]').val());



                    $.post(arterosil_ajaxurl,orderData)
                    .done(function(data){
                        
                        var keys = Object.keys(data);

                        for(const index in keys){
                            if(data[ keys[index] ].success == true){
                                APPDATA.user.meta[ keys[index] ][0] =   data[ keys[index] ].value;      
                            }
                        }
                        renderView().billing();
                        spinner().done();
                    })
                    .fail(function(data){
                        spinner().failed(data.responseJSON.data.message);
                        console.error("Error while saving Billing Data", data);
                    });
                    
                    $(this).closest('.form-update').find('.form-update__edit').hide();
                    $(this).closest('.form-update').find('.form-update__view').fadeIn();


                });

                //init click events
                initFormUpdateButton();
            },
            shipping: function(){
                $('.shipping-outer').html( $(ORDERFORM.templates.shipping( { data:APPDATA.user.meta, config:APPDATA.config } )) );
                $('.shipping-outer').find('[data-aaction="updateShipping"]').on('click', function(e){
                    e.preventDefault();

                    var parentForm = $(this).closest('.form-update__edit');
                    var orderData = {
                        userID: USERID,
                        action: 'updateShipping'
                    };   

                    parentForm.find('[name="shipping_address_1"]').val()     && (orderData['shipping_address_1']  = parentForm.find('[name="shipping_address_1"]').val());
                    parentForm.find('[name="shipping_address_2"]').val()     && (orderData['shipping_address_2']  = parentForm.find('[name="shipping_address_2"]').val());
                    parentForm.find('[name="shipping_city"]').val()          && (orderData['shipping_city']       = parentForm.find('[name="shipping_city"]').val());
                    parentForm.find('[name="shipping_company"]').val()       && (orderData['shipping_company']    = parentForm.find('[name="shipping_company"]').val());
                    parentForm.find('[name="shipping_country"]').val()       && (orderData['shipping_country']    = parentForm.find('[name="shipping_country"]').val());
                    parentForm.find('[name="shipping_first_name"]').val()    && (orderData['shipping_first_name'] = parentForm.find('[name="shipping_first_name"]').val());
                    parentForm.find('[name="shipping_last_name"]').val()     && (orderData['shipping_last_name']  = parentForm.find('[name="shipping_last_name"]').val());
                    parentForm.find('[name="shipping_state"]').val()         && (orderData['shipping_state']      = parentForm.find('[name="shipping_state"]').val());
                    parentForm.find('[name="shipping_postcode"]').val()      && (orderData['shipping_postcode']   = parentForm.find('[name="shipping_postcode"]').val());
                    //parentForm.find('[name="billing_phone"]').val()       && (orderData['billing_phone'] = parentForm.find('[name="billing_phone"]').val());
                    //parentForm.find('[name="billing_email"]').val()       && (orderData['billing_email'] = parentForm.find('[name="billing_email"]').val());



                    $.post(arterosil_ajaxurl,orderData)
                    .done(function(data){
                        var keys = Object.keys(data);
                        for(const index in keys){
                            if(data[ keys[index] ].success == true){
                                APPDATA.user.meta[ keys[index] ][0] =   data[ keys[index] ].value;      
                            }
                        }
                        renderView().shipping();
                        spinner().done();
                    })
                    .fail(function(data){
                        spinner().failed(data.responseJSON.data.message);
                        console.error("Error while Saving new shipping data", data);
                    });
                    
                    $(this).closest('.form-update').find('.form-update__edit').hide();
                    $(this).closest('.form-update').find('.form-update__view').fadeIn();
                    
                });

                //init click event
                initFormUpdateButton();
            }
        };
    }

    /**
     * PROCESS ORDER
    */
   function processOrder(){
        var line_items = [];

        spinner().loading();

        for(var key in ORDERFORM.cart){
            line_items.push({
                'product_id' : key,
                'quantity' : ORDERFORM.cart[key].quantity
            });
        }
        var orderData = {
            userID: USERID,
            cardID: $($('.stripe-cards')[0][ $('.stripe-cards')[0].selectedIndex ]).val(),
            line_items: line_items,
            action: 'processOrder'
        };    

        $.post(arterosil_ajaxurl,orderData)
        .done(function(data){
            spinner().completed('Successfully completed purchase!');
        })
        .fail(function(data){
            spinner().failed(data.responseJSON.data.message);
            console.error("Error while fetching User Data", data);
        });
   }

   /**
    * SPINNER
   */
   function spinner(){
       var orderForm = $('.order-form');
       var loader = $('.order-form .circle-loader-outer');
       return {
           loading: function(){
            orderForm
            .addClass('loading')
            .find('.circle-loader')
            .removeClass('load-complete')
            .removeClass('load-failed');
            loader.focus();
           },
           
           done: function(){
            orderForm
            .removeClass('loading')
            .find('.circle-loader')
            .removeClass('load-complete')
            .removeClass('load-failed');

            orderForm.find('.order-form-text').text('');
           },
           failed: function(message){

            orderForm
            .addClass('loading')
            .find('.circle-loader')
            .addClass('load-failed');

            orderForm.find('.order-form-text').text(message);
            
            loader
            .focus()
            .off('click')
            .on('click',function(){
                orderForm
                .removeClass('loading')
                .find('.circle-loader')
                .removeClass('load-complete');
                orderForm.find('.order-form-text').text('');
            });

           },
           completed: function(message){

            orderForm
            .addClass('loading')
            .find('.circle-loader')
            .addClass('load-complete');

            orderForm.find('.order-form-text').text(message);
            
            loader
            .focus()
            .off('click')
            .on('click',function(){
                orderForm
                .removeClass('loading')
                .find('.circle-loader')
                .removeClass('load-complete');
                orderForm.find('.order-form-text').text('');
                location.reload();
            });

           },

       };
   }
    
   //================================================================
   /**
    * HANDLEBAR HELPERS
    */
   //================================================================
    window.Handlebars.registerHelper('select', function( obj, value, options){

        if(Array.isArray(value)){
            value = value[0];
        }

        var keys = Object.keys(obj);
        var out = "";

        for(const index in keys){
            out = out + "<option "+ (keys[index]===value?'selected':'') +" value=\""+keys[index]+"\">" + obj[ keys[index] ] + "</option>";
        }

        return out;
    });

    Handlebars.registerHelper('ifEquals', function(arg1, arg2, options) {
        
        if(Array.isArray(arg1)) arg1 = arg1[0];
        
        return (arg1 == arg2) ? options.fn(this) : options.inverse(this);
    });

})( jQuery );
